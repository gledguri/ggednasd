sq <- read.csv("manually_annotated_function_outcome.csv")
unique(sq$qseqid)
pppp <- unique(sq$qseqid)
sq <- sq[!duplicated(sq$qseqid),]
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
sq_compiled <- rbind(sq_compiled,sq)
sq_compiled
dim(sq_compiled)
sq_compiled$qseqid
pppp
i
i=1
unique(fa$qseqid)[seq_dev(100,i)]
manually_annotate(fa,3,query_vector = unique(fa$qseqid)[seq_dev(100,i)])
sq <- read.csv("manually_annotated_function_outcome.csv")
unique(sq$qseqid)
pppp
unique(sq$qseqid)
unique(fa$qseqid)[seq_dev(100,i)]
sq <- sq[!duplicated(sq$qseqid),]
sq_compiled
dim(sq_compiled)
sq_compiled <- rbind(sq_compiled,sq)
dim(sq_compiled)
for (i in 0:2) {
manually_annotate(fa,3,query_vector = unique(fa$qseqid)[seq_dev(100,i)])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
sq_compiled <- rbind(sq_compiled,sq)
}
dim(sq_compiled)
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
for (i in 0:2) {
manually_annotate(fa,3,query_vector = unique(fa$qseqid)[seq_dev(100,i)])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
sq_compiled <- rbind(sq_compiled,sq)
}
dim(sq_compiled)
sum(sq_compiled$qseqid%in%unique(fa$qseqid)[seq_dev(300,0)])
?dir.create()
dir.create("temp_folder_delete")
length(unique(fa$qseqid))
length(unique(fa$qseqid))/100
i=floor(length(unique(fa$qseqid))/100)
i
seq_dev(100,i)
seq_dev(100,i)-329834
seq_dev(100,i)
unique(fa$qseqid)[seq_dev(100,i)]
length(unique(fa$qseqid))
seq_dev(100,i)[seq_dev(100,i)=<length(unique(fa$qseqid))]
seq_dev(100,i)
seq_dev(100,i)<length(unique(fa$qseqid))
seq_dev(100,i)<=length(unique(fa$qseqid))
seq_dev(100,i)[seq_dev(100,i)=<length(unique(fa$qseqid))]
seq_dev(100,i)[seq_dev(100,i)<=length(unique(fa$qseqid))]
l <- seq_dev(100,i)[seq_dev(100,i)<=length(unique(fa$qseqid))]
l <- seq_dev(100,i)[seq_dev(100,i)<=length(unique(fa$qseqid))]
l
?manually_annotate()
length(unique(fa$qseqid))
length(unique(fa$qseqid))/slice
slice=1000
length(unique(fa$qseqid))/slice
floor(length(unique(fa$qseqid))/slice)
large_annotate <- function(input,method=3,slice=1000){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
write.csv(sq,paste0("/temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
sq <- sq[!duplicated(sq$qseqid),]
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
large_annotate <- function(input,method=3,slice=1000){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
write.csv(sq,paste0("/temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
sq <- sq[!duplicated(sq$qseqid),]
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
large_annotate(fa)
write.csv(sq,paste0("/temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
paste0("/temp_folder_delete/",i,"seq_ann.csv")
write.csv(sq,paste0("./temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
i
rm(i)
large_annotate <- function(input,method=3,slice=1000){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
write.csv(sq,paste0("./temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
sq <- sq[!duplicated(sq$qseqid),]
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
large_annotate(fa,slice = 100)
list.files("./temp_folder_delete/")
list.files("./temp_folder_delete/")[1]
#broken_pipe_large_annotate <- function(){}
temp <- read.csv(list.files("./temp_folder_delete/")[1])
list.files("./temp_folder_delete/")[-1]
#broken_pipe_large_annotate <- function(){}
temp <- read.csv(list.files("./temp_folder_delete/")[1])
read.csv(list.files("./temp_folder_delete/")[1])
list.files("./temp_folder_delete/"
list.files("./temp_folder_delete/")
list.files("./temp_folder_delete/")
list.files("./temp_folder_delete/")[1]
read.csv(list.files("./temp_folder_delete/")[1])
list.files("./temp_folder_delete/")[1]
#broken_pipe_large_annotate <- function(){}
temp <- read.csv(paste0("/temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
paste0("/temp_folder_delete/",list.files("./temp_folder_delete/")[1])
#broken_pipe_large_annotate <- function(){}
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
temp
list.files("./temp_folder_delete/")[-1]
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- rbind(temp,temp2)
}
dim(temp)
#broken_pipe_large_annotate <- function(){}
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
dim(temp)
large_annotate <- function(input,method=3,slice=1000){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
large_annotate(fa,slice = 100)
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
sq_compiled <- rbind(sq_compiled,sq)
}
large_annotate <- function(input,method=3,slice=1000){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
large_annotate(fa,slice = 100)
#broken_pipe_large_annotate <- function(){}
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- rbind(temp,temp2)
}
dim(temp)
#broken_pipe_large_annotate <- function(){}
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- as.data.frame(rbind(temp,temp2))
}
head(temp)
fa1 <- fa[fa$qseqid%in%temp$qseqid,]
dim(fa1)
unique(fa1$qseqid)
length(unique(fa1$qseqid))
head(temp)
fa1 <- fa[fa$qseqid%in%temp$qseqid,]
dim(fa1)
length(unique(fa1$qseqid))
fa1 <- fa[fa$qseqid%notin%temp$qseqid,]
broken_pipe_large_annotate <- function(input){
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- as.data.frame(rbind(temp,temp2))
}
output <- input[input$qseqid%notin%temp$qseqid,]
return(output)
}
fa_remaining <- broken_pipe_large_annotate(fa)
dir.create("temp_folder_delete")
fa_remaining
slice=100
input <- fa_remaining
floor(length(unique(input$qseqid))/slice)
list.files("./temp_folder_delete/")
substr(list.files("./temp_folder_delete/"),nchar(list.files("./temp_folder_delete/")-11,list.files("./temp_folder_delete/")))
substr(list.files("./temp_folder_delete/"),1,1)
substr(list.files("./temp_folder_delete/"),nchar(list.files("./temp_folder_delete/"))-11,list.files("./temp_folder_delete/"))
nchar(list.files("./temp_folder_delete/"))-11
nchar(list.files("./temp_folder_delete/"))-10
nchar(list.files("./temp_folder_delete/"))
nchar(list.files("./temp_folder_delete/"))-10
nchar(list.files("./temp_folder_delete/"))-10
substr(list.files("./temp_folder_delete/"),nchar(list.files("./temp_folder_delete/"))-11,nchar(list.files("./temp_folder_delete/")))
substr(list.files("./temp_folder_delete/"),nchar(list.files("./temp_folder_delete/"))-10,nchar(list.files("./temp_folder_delete/")))
substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-10)
substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-11)
max(as.numeric(substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-11)))
maa <- max(as.numeric(substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-11)))
large_annotate_after_broken_pipe <- function(input,method=3,slice=1000){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
maa <- max(as.numeric(substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-11)))
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i+maa,"seq_ann.csv"),row.names = F)
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
large_annotate_after_broken_pipe(fa_remaining,slice = 100)
fa_remaining <- broken_pipe_large_annotate(fa_remaining)
large_annotate_after_broken_pipe(fa_remaining,slice = 100)
large_annotate(fa,slice=100)
fa_remaining <- broken_pipe_large_annotate(fa)
large_annotate_after_broken_pipe(fa_remaining,slice=100)
maa
maa <- max(as.numeric(substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-11)))
maa
large_annotate <- function(input,method=3,slice=1000){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
broken_pipe_large_annotate <- function(input){
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- as.data.frame(rbind(temp,temp2))
}
output <- input[input$qseqid%notin%temp$qseqid,]
return(output)
}
large_annotate_after_broken_pipe <- function(input,method=3,slice=1000){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
maa <- max(as.numeric(substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-11)))
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i+maa+1,"seq_ann.csv"),row.names = F)
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
large_annotate <- function(input,method=3,slice=100){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
broken_pipe_large_annotate <- function(input){
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- as.data.frame(rbind(temp,temp2))
}
output <- input[input$qseqid%notin%temp$qseqid,]
return(output)
}
large_annotate_after_broken_pipe <- function(input,method=3,slice=100){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
sq_compiled <- setNames(data.frame(matrix(NA,0,length(l))),l)
dir.create("temp_folder_delete")
maa <- max(as.numeric(substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-11)))
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i+maa+1,"seq_ann.csv"),row.names = F)
sq_compiled <- rbind(sq_compiled,sq)
}
write.csv(sq_compiled,"sq_compiled.csv")
}
large_annotate(fa)
fa_rem <- broken_pipe_large_annotate(fa)
large_annotate_after_broken_pipe(fa_rem)
fa_rem <- broken_pipe_large_annotate(fa_rem)
large_annotate_after_broken_pipe(fa_rem)
large_annotate <- function(input,method=3,slice=100){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
dir.create("temp_folder_delete")
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
}
}
broken_pipe_large_annotate <- function(input){
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- as.data.frame(rbind(temp,temp2))
}
output <- input[input$qseqid%notin%temp$qseqid,]
return(output)
}
large_annotate_after_broken_pipe <- function(input,method=3,slice=100){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
dir.create("temp_folder_delete")
maa <- max(as.numeric(substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-11)))
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i+maa+1,"seq_ann.csv"),row.names = F)
}
}
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
#Step2
large_annotate(fa,3,100);#If you press "Esc" in the middle of the process then you do Step 2.1 and 2.2 again
#Step2.1
fa_remaining <- broken_pipe_large_annotate(fa)
#Step2.2
large_annotate_after_broken_pipe(fa_remaining,3,100)#If you press "Esc" in the middle of the process then you do Step 2.1 and 2.2 again
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
temp
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- as.data.frame(rbind(temp,temp2))
}
dim(temp)
list.files("./temp_folder_delete/")
unlink(list.files("./temp_folder_delete/"))
list.files("./temp_folder_delete/")
paste0("./temp_folder_delete/",list.files("./temp_folder_delete/"))
unlink(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")))
large_annotate <- function(input,method=3,slice=100){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
dir.create("temp_folder_delete")
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i,"seq_ann.csv"),row.names = F)
}
}
broken_pipe_large_annotate <- function(input){
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- as.data.frame(rbind(temp,temp2))
}
output <- input[input$qseqid%notin%temp$qseqid,]
return(output)
}
large_annotate_after_broken_pipe <- function(input,method=3,slice=100){
l <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs","annotated_tax","pmatchsel")
dir.create("temp_folder_delete")
maa <- max(as.numeric(substr(list.files("./temp_folder_delete/"),0,nchar(list.files("./temp_folder_delete/"))-11)))
for (i in 0:floor(length(unique(input$qseqid))/slice)) {
l <- seq_dev(slice,i)[seq_dev(slice,i)<=length(unique(input$qseqid))] #makes sure that the number doesn't passes the sequence when it arrives at the end
manually_annotate(input,method,query_vector = unique(input$qseqid)[l])
sq <- read.csv("manually_annotated_function_outcome.csv")
sq <- sq[!duplicated(sq$qseqid),]
write.csv(sq,paste0("./temp_folder_delete/",i+maa+1,"seq_ann.csv"),row.names = F)
}
}
compile_ann <- function(){
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- as.data.frame(rbind(temp,temp2))
}
return(temp)
unlink(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")))
write.csv(temp,"./temp_folder_delete/comipled_annotated_seqeunces.csv",row.names = F)
}
#Step2
large_annotate(fa,3,1000);#If you press "Esc" in the middle of the process then you do Step 2.1 and 2.2 again
#Step2.1
fa_remaining <- broken_pipe_large_annotate(fa)
#Step2.2
large_annotate_after_broken_pipe(fa_remaining,3,10000)#If you press "Esc" in the middle of the process then you do Step 2.1 and 2.2 again
#Step2.2
large_annotate_after_broken_pipe(fa_remaining,3,1000)#If you press "Esc" in the middle of the process then you do Step 2.1 and 2.2 again
#Step3
output <- compile_ann()
View(output)
paste0("./temp_folder_delete/",list.files("./temp_folder_delete/"))
unlink(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")))
write.csv(temp,"./temp_folder_delete/comipled_annotated_seqeunces.csv",row.names = F)
compile_ann <- function(){
temp <- read.csv(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")[1]))
for(i in list.files("./temp_folder_delete/")[-1]){
temp2 <- read.csv(paste0("./temp_folder_delete/",i))
temp <- as.data.frame(rbind(temp,temp2))
}
return(temp)
unlink(paste0("./temp_folder_delete/",list.files("./temp_folder_delete/")))
write.csv(temp,"./temp_folder_delete/comipled_annotated_seqeunces.csv",row.names = F)
}
unique(output$Ssciname)
output$qseqid[multi_grep(c("Clupea harengus","Clupea pallasii"),output$Ssciname)]
colSums(edna[edna$id%in%output$qseqid[multi_grep(c("Clupea harengus","Clupea pallasii"),output$Ssciname)],st:end])
sum(colSums(edna[edna$id%in%output$qseqid[multi_grep(c("Clupea harengus","Clupea pallasii"),output$Ssciname)],st:end]))
colSums(edna[edna$id%in%output$qseqid[multi_grep(c("Clupea harengus","Clupea pallasii"),output$Ssciname)],st:end])
barplot(colSums(edna[edna$id%in%output$qseqid[multi_grep(c("Clupea harengus","Clupea pallasii"),output$Ssciname)],st:end]))
unique(output$Ssciname)
colSums(edna[edna$id%in%output$Ssciname,st:end])
sum(colSums(edna[edna$id%in%output$Ssciname,st:end]))
sum(colSums(edna[edna$id%in%output$qseqid,st:end]))
ls("package:ggu.base.fun")
writeLines(ls("package:ggu.base.fun"))
for(i in 0:3) seq_dev(100,i)
for(i in 0:3) print(seq_dev(100,i))
unique(edna$id)
length(unique(edna$id))
sum(colSums(edna[,st:end]))/length(unique(edna$id))
hist(rowSums(edna[,st:end]))
hist(rowSums(edna[,st:end]),breaks = 3000)
hist(log10(rowSums(edna[,st:end])+1),breaks = 3000)
hist(log10(rowSums(edna[,st:end])+1),breaks = 300)
hist(log10(rowSums(edna[,st:end])+1),breaks = 30)
hist(log20(rowSums(edna[,st:end])+1),breaks = 30)
hist(log10(rowSums(edna[,st:end])+1),breaks = 30)
sum(rowSums(edna[,st:end]))
sum(rowSums(edna[,st:end])>10)
rowSums(edna[rowSums(edna[,st:end])>10,st:end])
hist(rowSums(edna[rowSums(edna[,st:end])>10,st:end]))
hist(rowSums(edna[rowSums(edna[,st:end])>10,st:end]),breaks = 30)
hist(rowSums(edna[rowSums(edna[,st:end])>1000,st:end]),breaks = 30)
rowSums(edna[rowSums(edna[,st:end])>10,st:end])
a <- rowSums(edna[rowSums(edna[,st:end])>10,st:end])
writeLines(a)
writeLines(as.character(a))
sum(a)
library("devtools")
library(roxygen2)
setwd("/Users/a36142/Documents/GitHub/ggednasd")
setwd("./ggu.base.fun")
document()
setwd("/Users/a36142/Documents/GitHub/ggednasd")
# setwd("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Rpackage")
create("ggu.base.fun") #if you want to create a new pckg
setwd("./ggu.base.fun")
document()
setwd("..")
install("ggu.base.fun")
library(ggu.base.fun)
writeLines(ls("package:ggu.base.fun"))
#DNA analysis
# Instal libraries --------------------------------------------------------
library(devtools)
library(vegan)
library(ggu.base.fun)
