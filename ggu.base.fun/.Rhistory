# xlim(-16,16)+
# scale_x_continuous(trans='log10')+
theme_minimal()+
xlab(pa)
param.extract(stanMod)
pa <- "theta"
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
faidx <- stan_data$species_std
fa1 <- (collapse_similar(fa1,faidx))$factor
fa2 <- collapse_similar(fa2,faidx)$factor
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
# uu <- unique(paste0(fa1,"@",fa2))#For multiple factors
# colnames(param) <- paste(uu,ncol(param)/length(uu))#For multiple factors
#if you want to collapse per factor
input_data <- colnames(param)
denom <- ncol(param);nom <- length(unique(input_data));ratio <- denom/nom
paramtemp <- as.data.frame(matrix(NA,nrow(param)*ratio,nom))
for (i in 0:(ratio-1)) {paramtemp[seq_dev(nrow(param),i),] <- param[,seq_dev(nom,i)]}
colnames(paramtemp) <- unique(input_data)
param <- paramtemp
tparam <- trans(param)
pa <- "theta"
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
faidx <- stan_data$species_std
fa1 <- (collapse_similar(fa1,faidx))$factor
faidx <- 1:N
faidx <- 1:stan_data$N
fa1 <- (collapse_similar(fa1,faidx))$factor
fa2 <- collapse_similar(fa2,faidx)$factor
fa1
pa <- "theta"
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
fa1
fa2
faidx <- 1:stan_data$N
faidx
(collapse_similar(fa1,faidx))$factor
fa1 <- (collapse_similar(fa1,faidx))$factor
fa2 <- collapse_similar(fa2,faidx)$factor
fa2
fa1
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
param
colnames(param)
#if you want to collapse per factor
input_data <- colnames(param)
denom <- ncol(param);nom <- length(unique(input_data));ratio <- denom/nom
ratio
ratio
denom
nom
length(unique(input_data))
aa <- head(param)
aa
dim(aa)
input_data
fa1
denom/nom
denom/nom
make.unique(input_data)
make.unique2(input_data)
make.unique(input_data)
unique(make.unique(input_data))
make.unique.2(input_data)
make.unique.2(input_data)[gerpl("Cod@2",make.unique.2(input_data))]
make.unique.2(input_data)[grep("Cod@2",make.unique.2(input_data))]
make.unique.2(input_data)[grep("Cod@3",make.unique.2(input_data))]
make.unique.2(input_data)[grep("Cod@4",make.unique.2(input_data))]
make.unique.2(input_data)[grep("Cod@5",make.unique.2(input_data))]
denom <- ncol(param)
denom
nom <- length(unique(input_data))
nom
make.unique.2(input_data)
make.unique(input_data,";")
str_split(make.unique(input_data,";"), ";", simplify=T)[,2]
as.numeric(str_split(make.unique(input_data,";"), ";", simplify=T)[,2])
max(as.numeric(str_split(make.unique(input_data,";"), ";", simplify=T)[,2]))
max(as.numeric(str_split(make.unique.2(input_data,";"), ";", simplify=T)[,2]))
(as.numeric(str_split(make.unique.2(input_data,";"), ";", simplify=T)[,2])
as.numeric(str_split(make.unique.2(input_data,";"), ";", simplify=T)[,2])
max(as.numeric(str_split(make.unique.2(input_data,";"), ";", simplify=T)[,2]))
denom <- ncol(param);nom <- length(unique(input_data));
ratio <- max(as.numeric(str_split(make.unique.2(input_data,";"), ";", simplify=T)[,2]))
paramtemp <- as.data.frame(matrix(NA,nrow(param)*ratio,nom))
for (i in 0:(ratio-1)) {paramtemp[seq_dev(nrow(param),i),] <- param[,seq_dev(nom,i)]}
0:(ratio-1)
paramtemp
#if you want to collapse per factor
input_data <- colnames(param)
denom <- ncol(param);nom <- length(unique(input_data));
ratio <- max(as.numeric(str_split(make.unique.2(input_data,";"), ";", simplify=T)[,2]))
paramtemp <- as.data.frame(matrix(NA,nrow(param)*ratio,nom))
paramtemp
0:(ratio-1)
i=0
paramtemp[seq_dev(nrow(param),i),]
param[,seq_dev(nom,i)]
i=20
seq_dev(nom,i)
0:(ratio-1)
i=21
seq_dev(nrow(param),i)
seq_dev(nom,i)]
seq_dev(nom,i)
aa
aa <- 11[,1:100]
aa <- aa[,1:100]
aa
db <- aa
temp <- as.data.frame(matrix(NA,999,length(unique(colnames(db)))))
temp
param
db <- head(param)
db <- db[,1:100]
temp <- as.data.frame(matrix(NA,999,length(unique(colnames(db)))))
temp
temp <- as.data.frame(matrix(NA,999,length(unique(colnames(db)))))
temp
length(unique(colnames(db))
length(unique(colnames(db)))
length(unique(colnames(db)))
colnames(db)
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
temp <- as.data.frame(matrix(NA,999,length(unique(colnames(db)))))
db <- head(param)
db <- db[,1:100]
colnames(db)
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
param
colnames(param)
db <- head(param)
colnames(db)
db <- db[,1:100]
length(unique(colnames(db)))
colnames(db)
db <- head(param)
db <- db[,1:100]
db
db <- head(param)
db
temp <- as.data.frame(matrix(NA,999,length(unique(colnames(db)))))
temp
colnames(db) <- unique(colnames(db))
colnames(db)
db
colnames(temp) <- unique(colnames(db))
db <- head(param)
temp <- as.data.frame(matrix(NA,999,length(unique(colnames(db)))))
colnames(temp) <- unique(colnames(db))
colnames(temp)
k <- unique(colnames(db));
k
temp <- as.data.frame(matrix(NA,999,length(k)))
temp
colnames(temp) <- k
temp
k
i=k[1]
i
temp[,i]
db[,i]
db[,i]
make.unique.2(k)
make.unique.2(colnames(db))
i
colnames(db)
db[,i]
db[,1]
db[,2]
db[,1]
which(i%in%colnames(db))
which(colnames(db)%in%i)
db[,which(colnames(db)%in%i)]
as.vector(which(colnames(db)%in%i))
as_vector(db[,which(colnames(db)%in%i)])
temp[,i] <- as_vector(db[,which(colnames(db)%in%i)])
length(as_vector(db[,which(colnames(db)%in%i)]))
j <- as_vector(db[,which(colnames(db)%in%i)])
temp[1:length(j),i] <- j
temp
k <- unique(colnames(db));
temp <- as.data.frame(matrix(NA,999,length(k)))
colnames(temp) <- k
for (i in 1:k) {
j <- as_vector(db[,which(colnames(db)%in%i)])
temp[1:length(j),i] <- j
}
i
k <- unique(colnames(db));
temp <- as.data.frame(matrix(NA,999,length(k)))
colnames(temp) <- k
k
head(temp)
temp <- as.data.frame(matrix(NA,9999,length(k)))
colnames(temp) <- k
for (i in 1:k) {
j <- as_vector(db[,which(colnames(db)%in%i)])
temp[1:length(j),i] <- j
}
i
k
j <- as_vector(db[,which(colnames(db)%in%i)])
j
temp[1:length(j),i]
j
length(j)
temp[(1:length(j)),i]
j
temp[(1:length(j)),i] <- j
for (i in 1:k) {
j <- as_vector(db[,which(colnames(db)%in%i)])
temp[(1:length(j)),i] <- j
}
as_vector(db[,which(colnames(db)%in%i)])
as.numeric(as_vector(db[,which(colnames(db)%in%i)]))
for (i in 1:k) {
j <- as.numeric(as_vector(db[,which(colnames(db)%in%i)]))
temp[(1:length(j)),i] <- j
}
k
i
for (i in k) {
j <- as.numeric(as_vector(db[,which(colnames(db)%in%i)]))
temp[(1:length(j)),i] <- j
}
temp
k <- unique(colnames(db));
k
max(as.numeric(str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2]))
*nrow(db)
nrow(db)
max(as.numeric(str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2]))*nrow(db)
#'*!!Need to be entered in the gled base functions!!* #Collapses the OTU table based on the similar name of species
collapse_similar_columns <- function(db){
cat("Collapsing based on similar column names \n")
k <- unique(colnames(db));
temp_row <- max(as.numeric(str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2]))*nrow(db)
temp <- as.data.frame(matrix(NA,temp_row,length(k)))
colnames(temp) <- k
for (i in k) {
j <- as.numeric(as_vector(db[,which(colnames(db)%in%i)]))
temp[(1:length(j)),i] <- j
}
return(temp)
}
pa <- "theta"
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
faidx <- 1:stan_data$N
faidx <- stan_data$species_std
fa1 <- collapse_similar(fa1,faidx)$factor
fa2 <- collapse_similar(fa2,faidx)$factor
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
colnames(param)
pa <- "theta"
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
faidx <- 1:stan_data$N
faidx <- stan_data$species_std
fa1 <- collapse_similar(fa1,faidx)$factor
fa2 <- collapse_similar(fa2,faidx)$factor
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
colnames(param)
pa <- "theta"
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
faidx <- 1:stan_data$N
fa1 <- collapse_similar(fa1,faidx)$factor
fa2 <- collapse_similar(fa2,faidx)$factor
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
colnames(param)
paramtemp <- collapse_similar_columns(param)
head(paramtemp)
dim(paramtemp)
dim(param)
tparam <- trans(paramtemp)
tparam$X <- str_split(tparam$Y, "\\@", simplify=T)[,2]
tparam$Y <- str_split(tparam$Y, "\\@", simplify=T)[,1]
tparam$X <- factor((tparam$X),level=rev(unique(tparam$X)))
tparam$Y <- factor((tparam$Y),level=rev(unique(tparam$Y)))
# tparam$Z <- (tparam$Z+1)
ggplot(tparam,aes(x = `Z`, y = `X`, fill = `Y`))+#
geom_density_ridges(scale = 2,size = 0.2,rel_min_height = 0.01,alpha = .8)+#
scale_fill_discrete(name = fa2)+
labs(title = paste("Posterior probability distribution of",pa,"given per each species and year"))+
ylab("Species") +
# xlim(-16,16)+
# scale_x_continuous(trans='log10')+
theme_minimal()+
xlab(pa)
st_qpcr_plot_pres
pa <- "theta"
fa1 <- st_qpcr$Target.Name
sum(is.na(tparam$Z))
mean(tparam$Z)
mean(na.omit(tparam$Z))
tparam2 <- tparam[!is.na(tparam$Z),]
mean(tparam2)
mean(as.numeric(tparam2))
tparam2 <- tparam[!is.na(tparam$Z),]
head(tparam[!is.na(tparam$Z),])
head(tparam[is.na(tparam$Z),])
head(tparam[!is.na(tparam$Z),])
tparam2 <- (tparam[!is.na(tparam$Z),])
dim(tparam2)
dim(tparam)
mean(tparam2$Z)
mean(na.omit(tparam$Z))
sum(na.omit(tparam$Z))
sum(tparam2$Z)
param.extract(stanMod)
pa <- "phi_0"
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
# faidx <- 1:stan_data$N
faidx <- stan_data$species_std
fa1 <- collapse_similar(fa1,faidx)$factor
fa2 <- collapse_similar(fa2,faidx)$factor
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
paramtemp <- collapse_similar_columns(param)
paramtemp <- collapse_similar_columns(param)
collapse_similar_columns(param)
param
db <- param
k <- unique(colnames(db));
k
temp_row <- max(as.numeric(str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2]))*nrow(db)
temp_row
max(as.numeric(str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2]))*nrow(db)
make.unique.2(colnames(db),";")
str_split(make.unique.2(colnames(db),";"), ";", simplify=T)
nrow(db)
as.numeric(str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2])
as.numeric(str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2])
str_split(make.unique.2(colnames(db),";"), ";", simplify=T)
str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[2]
str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2]
ll <- str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2]
duplicated(colnames(db))
sum(duplicated(colnames(db)))
#'*!!Need to be entered in the gled base functions!!* #Collapses the OTU table based on the similar name of species
collapse_similar_columns <- function(db){
cat("Collapsing based on similar column names \n")
k <- unique(colnames(db));
if(sum(duplicated(colnames(db)))>0){
temp_row <- max(as.numeric(str_split(make.unique.2(colnames(db),";"), ";", simplify=T)[,2]))*nrow(db)
}else{
temp_row <- nrow(db)
}
temp <- as.data.frame(matrix(NA,temp_row,length(k)))
colnames(temp) <- k
for (i in k) {
j <- as.numeric(as_vector(db[,which(colnames(db)%in%i)]))
temp[(1:length(j)),i] <- j
}
return(temp)
}
collapse_similar_columns(param)
paramtemp <- collapse_similar_columns(param)
tparam <- trans(paramtemp)
tparam <- (tparam[!is.na(tparam$Z),])
tparam$X <- str_split(tparam$Y, "\\@", simplify=T)[,2]
tparam$Y <- str_split(tparam$Y, "\\@", simplify=T)[,1]
tparam$X <- factor((tparam$X),level=rev(unique(tparam$X)))
tparam$Y <- factor((tparam$Y),level=rev(unique(tparam$Y)))
# tparam$Z <- (tparam$Z+1)
ggplot(tparam,aes(x = `Z`, y = `X`, fill = `Y`))+#
geom_density_ridges(scale = 2,size = 0.2,rel_min_height = 0.01,alpha = .8)+#
scale_fill_discrete(name = fa2)+
labs(title = paste("Posterior probability distribution of",pa,"given per each species and year"))+
ylab("Species") +
# xlim(-16,16)+
# scale_x_continuous(trans='log10')+
theme_minimal()+
xlab(pa)
pa <- "phi_1"
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
# faidx <- 1:stan_data$N
faidx <- stan_data$species_std
fa1 <- collapse_similar(fa1,faidx)$factor
fa2 <- collapse_similar(fa2,faidx)$factor
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
paramtemp <- collapse_similar_columns(param)
tparam <- trans(paramtemp)
tparam <- (tparam[!is.na(tparam$Z),])
tparam$X <- str_split(tparam$Y, "\\@", simplify=T)[,2]
tparam$Y <- str_split(tparam$Y, "\\@", simplify=T)[,1]
tparam$X <- factor((tparam$X),level=rev(unique(tparam$X)))
tparam$Y <- factor((tparam$Y),level=rev(unique(tparam$Y)))
# tparam$Z <- (tparam$Z+1)
ggplot(tparam,aes(x = `Z`, y = `X`, fill = `Y`))+#
geom_density_ridges(scale = 2,size = 0.2,rel_min_height = 0.01,alpha = .8)+#
scale_fill_discrete(name = fa2)+
labs(title = paste("Posterior probability distribution of",pa,"given per each species and year"))+
ylab("Species") +
# xlim(-16,16)+
# scale_x_continuous(trans='log10')+
theme_minimal()+
xlab(pa)
prep_ridg_plot <- function(fa1,fa2,faidx,x=2,y=1){
fa1 <- collapse_similar(fa1,faidx)$factor
fa2 <- collapse_similar(fa2,faidx)$factor
param <- as.data.frame(extract(stanMod, par = pa))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
paramtemp <- collapse_similar_columns(param)
tparam <- trans(paramtemp)
tparam <- (tparam[!is.na(tparam$Z),])
tparam$X <- str_split(tparam$Y, "\\@", simplify=T)[,x]
tparam$Y <- str_split(tparam$Y, "\\@", simplify=T)[,y]
tparam$X <- factor((tparam$X),level=rev(unique(tparam$X)))
tparam$Y <- factor((tparam$Y),level=rev(unique(tparam$Y)))
return(tparam)
}
tparam <- prep_ridg_plot(st_qpcr$Target.Name,st_qpcr$std_idx,stan_data$species_std)
ggplot(tparam,aes(x = `Z`, y = `X`, fill = `Y`))+#
geom_density_ridges(scale = 2,size = 0.2,rel_min_height = 0.01,alpha = .8)+#
scale_fill_discrete(name = fa2)+
labs(title = paste("Posterior probability distribution of",pa,"given per each species and year"))+
ylab("Species") +
# xlim(-16,16)+
# scale_x_continuous(trans='log10')+
theme_minimal()+
xlab(pa)
prep_ridg_plot <- function(parameter,fa1,fa2,faidx,x=2,y=1){
fa1 <- collapse_similar(fa1,faidx)$factor
fa2 <- collapse_similar(fa2,faidx)$factor
param <- as.data.frame(extract(stanMod, par = parameter))
colnames(param) <- paste0(fa1,"@",fa2)#For multiple factors
paramtemp <- collapse_similar_columns(param)
tparam <- trans(paramtemp)
tparam <- (tparam[!is.na(tparam$Z),])
tparam$X <- str_split(tparam$Y, "\\@", simplify=T)[,x]
tparam$Y <- str_split(tparam$Y, "\\@", simplify=T)[,y]
tparam$X <- factor((tparam$X),level=rev(unique(tparam$X)))
tparam$Y <- factor((tparam$Y),level=rev(unique(tparam$Y)))
return(tparam)
}
tparam <- prep_ridg_plot("phi_0",st_qpcr$Target.Name,st_qpcr$std_idx,stan_data$species_std)
ggplot(tparam,aes(x = `Z`, y = `X`, fill = `Y`))+#
geom_density_ridges(scale = 2,size = 0.2,rel_min_height = 0.01,alpha = .8)+#
scale_fill_discrete(name = fa2)+
labs(title = paste("Posterior probability distribution of",pa,"given per each species and year"))+
ylab("Species") +
# xlim(-16,16)+
# scale_x_continuous(trans='log10')+
theme_minimal()+
xlab(pa)
tparam <- prep_ridg_plot("theta",st_qpcr$Target.Name,st_qpcr$std_idx,stan_data$species_std)
tparam <- prep_ridg_plot("theta",st_qpcr$Target.Name,st_qpcr$std_idx,1:stan_data$N)
ggplot(tparam,aes(x = `Z`, y = `X`, fill = `Y`))+#
geom_density_ridges(scale = 2,size = 0.2,rel_min_height = 0.01,alpha = .8)+#
scale_fill_discrete(name = fa2)+
labs(title = paste("Posterior probability distribution of",pa,"given per each species and year"))+
ylab("Species") +
# xlim(-16,16)+
# scale_x_continuous(trans='log10')+
theme_minimal()+
xlab(pa)
faidx <- 1:stan_data$N
tparam <- prep_ridg_plot("theta",fa1,fa2,faidx,1,2)
tparam <- prep_ridg_plot("theta",fa1,fa2,faidx)
faidx <- 1:stan_data$N
faidx
tparam <- prep_ridg_plot("theta",fa1,fa2,faidx)
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
tparam <- prep_ridg_plot("theta",fa1,fa2,faidx)
fa1 <- st_qpcr$Target.Name
fa2 <- st_qpcr$std_idx
faidx <- 1:stan_data$N
tparam <- prep_ridg_plot("theta",fa1,fa2,faidx,1,2)
ggplot(tparam,aes(x = `Z`, y = `X`, fill = `Y`))+#
geom_density_ridges(scale = 2,size = 0.2,rel_min_height = 0.01,alpha = .8)+#
scale_fill_discrete(name = fa2)+
labs(title = paste("Posterior probability distribution of",pa,"given per each species and year"))+
ylab("Species") +
# xlim(-16,16)+
# scale_x_continuous(trans='log10')+
theme_minimal()+
xlab(pa)
pa <- "phi_1"
tparam <- prep_ridg_plot("theta",fa1,fa2,faidx,2,1)
ggplot(tparam,aes(x = `Z`, y = `X`, fill = `Y`))+#
geom_density_ridges(scale = 2,size = 0.2,rel_min_height = 0.01,alpha = .8)+#
scale_fill_discrete(name = fa2)+
labs(title = paste("Posterior probability distribution of",pa,"given per each species and year"))+
ylab("Species") +
# xlim(-16,16)+
# scale_x_continuous(trans='log10')+
theme_minimal()+
xlab(pa)
fa2
param.extract(stanMod)
param.extract
#'*How to update the R package*
setwd("/Users/a36142/Documents/GitHub/ggednasd")
setwd("./ggu.base.fun")
document()
