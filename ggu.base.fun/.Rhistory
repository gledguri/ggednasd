st <- 30;kmer <- 30
for (i in 1:nrow(fast))ident[i,1:length(fast$seq_name[grep(substr(fast$seq[i],st,st+kmer),fast$seq)])] <- fast$seq_name[grep(substr(fast$seq[i],st,st+kmer),fast$seq)]
#Identify and remove the taxa that is detected in only one of the runs
tax_alone_l <- is.na(ident$V2)
tax_alone <- ident$V1[is.na(ident$V2)]
ident <- ident[!tax_alone_l,]
#Identify and collapse the taxa that have identical sequence names
uu <- vector("character",length = nrow(ident))
uu
i=1
ll <- sum(!is.na(ident[i,]))
Ã¸Ã¸
ll
#Identify and collapse the taxa that have identical sequence names
uu <- vector("character",length = nrow(ident))
for (i in 1:nrow(ident)) {
ll <- sum(!is.na(ident[i,]))
if(sum(!duplicated(as.vector(ident[i,1:ll])))==1){
uu[i] <- as.character(ident[i,1:ll][!duplicated(as.vector(ident[i,1:ll]))])
}else{uu[i] <- NA}}
uu
#Create a dataframe that looks at similar sequence names or similar nucleotide sequences
rm(ident)
ident <- as.data.frame(matrix(NA,nrow(fast),10))
st <- 30;kmer <- 30
for (i in 1:nrow(fast))ident[i,1:length(fast$seq_name[grep(substr(fast$seq[i],st,st+kmer),fast$seq)])] <- fast$seq_name[grep(substr(fast$seq[i],st,st+kmer),fast$seq)]
View(ident)
i=
1
fast$seq_name[grep(substr(fast$seq[i],st,st+kmer),fast$seq)]
for (i in 1:nrow(fast)){
ll <- fast$seq_name[grep(substr(fast$seq[i],st,st+kmer),fast$seq)]
ident[i,1:length(ll)] <- ll}
#Identify and remove the taxa that is detected in only one of the runs
tax_alone_l <- is.na(ident$V2)
ident$V2
#Identify and remove the taxa that is detected in only one of the runs
tax_alone_l <- is.na(ident$V2)
tax_alone <- ident$V1[is.na(ident$V2)]
tax_alone
ident <- ident[!tax_alone_l,]
ident
#Identify and collapse the taxa that have identical sequence names
uu <- vector("character",length = nrow(ident))
for (i in 1:nrow(ident)) {
ll <- sum(!is.na(ident[i,]))
if(sum(!duplicated(as.vector(ident[i,1:ll])))==1){
uu[i] <- as.character(ident[i,1:ll][!duplicated(as.vector(ident[i,1:ll]))])
}else{uu[i] <- NA}}
ident <- ident[is.na(uu),]
ident[c(1,17),]
ident[c(2,19),]
i=2
ident[i,1:sum(!is.na(ident[i,]))]
i=3
ident[i,1:sum(!is.na(ident[i,]))]
i=4
ident[i,1:sum(!is.na(ident[i,]))]
i=5
ident[i,1:sum(!is.na(ident[i,]))]
i=6
ident[i,1:sum(!is.na(ident[i,]))]
grep("kingfish",uu)
uu[grep("kingfish",uu)]
i=7
ident[i,1:sum(!is.na(ident[i,]))]
i=8
ident[i,1:sum(!is.na(ident[i,]))]
i=9
ident[i,1:sum(!is.na(ident[i,]))]
i=10
ident[i,1:sum(!is.na(ident[i,]))]
i=11
ident[i,1:sum(!is.na(ident[i,]))]
i=12
ident[i,1:sum(!is.na(ident[i,]))]
i=13
ident[i,1:sum(!is.na(ident[i,]))]
i=14
ident[i,1:sum(!is.na(ident[i,]))]
i=15
ident[i,1:sum(!is.na(ident[i,]))]
i=16
ident[i,1:sum(!is.na(ident[i,]))]
i=17
ident[i,1:sum(!is.na(ident[i,]))]
i=18
ident[i,1:sum(!is.na(ident[i,]))]
i=18
cat("\n");cat(ident[i,1:sum(!is.na(ident[i,]))])
cat("\n");cat(ident[i,1:sum(!is.na(ident[i,]))])
cat("\n")
cat(ident[i,1:sum(!is.na(ident[i,]))])
cat("\n");print(ident[i,1:sum(!is.na(ident[i,]))])
cat("\n");print(ident[i,1:sum(!is.na(ident[i,]))])
p <- ">banded"
i=18
cat("\n");print(ident[i,1:sum(!is.na(ident[i,]))])
cat("\n");print(ident[i,1:sum(!is.na(ident[i,]))])
for (i in 1:56) {
cat("\n");cat("\n");print(ident[i,1:sum(!is.na(ident[i,]))])
}
temp <- NA;vector <- vector(length = nrow(multiple_sbj))
require("devtools");devtools::install_github("gledguri/ggednasd/ggu.base.fun");require("ggu.base.fun")
coll_sim2 <- function(db,sim){
l <- unique(sim); #l <- l[-1]
otu_coll <- data.frame(matrix(0, length(l), ncol(db)))
# tax_coll <- data.frame(matrix(0, length(l), ncol(tax)))
colnames(otu_coll) <- colnames(db);#colnames(tax_coll) <- colnames(tax)
rownames(otu_coll) <- l
for (i in 1:length(l)) {
otu_coll[i,] <- colSums(db[sim%in%l[i],])
}
return(otu_coll)
}
#Import the dataframes
# mmi <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community input.csv")
mmi <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community input_v2.csv")
mmi$X[2:3] <- paste0("--",mmi$X[2:3]) #Fix the names for the few species
rownames(mmi) <- mmi$X;mmi <- mmi[,!grepl("X",colnames(mmi))] #Move the species names from a column into rownames
mmi <- mmi[,-c(multi_grep(c("MC_v2_NC_Br1","MC_v1_NA_Br1"),colnames(mmi)))] #Remove the samples which the primers didn't work
mmi <- rel.ab(mmi) #Conver the input into relative abundances
mmo <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community output.csv")
rownames(mmo) <- mmo$X;mmo <- mmo[,!grepl("X",colnames(mmo))]
mmo <- mmo[,-c(multi_grep(c("MC_v2_NC_Br1","MC_v1_NA_Br1"),colnames(mmo)))]
source("~/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Amplification efficiency (premature)_Jan23.R", echo=TRUE)
require("devtools");devtools::install_github("gledguri/ggednasd/ggu.base.fun");require("ggu.base.fun")
coll_sim2 <- function(db,sim){
l <- unique(sim); #l <- l[-1]
otu_coll <- data.frame(matrix(0, length(l), ncol(db)))
# tax_coll <- data.frame(matrix(0, length(l), ncol(tax)))
colnames(otu_coll) <- colnames(db);#colnames(tax_coll) <- colnames(tax)
rownames(otu_coll) <- l
for (i in 1:length(l)) {
otu_coll[i,] <- colSums(db[sim%in%l[i],])
}
return(otu_coll)
}
#Import the dataframes
# mmi <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community input.csv")
mmi <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community input_v2.csv")
mmi$X[2:3] <- paste0("--",mmi$X[2:3]) #Fix the names for the few species
rownames(mmi) <- mmi$X;mmi <- mmi[,!grepl("X",colnames(mmi))] #Move the species names from a column into rownames
mmi <- mmi[,-c(multi_grep(c("MC_v2_NC_Br1","MC_v1_NA_Br1"),colnames(mmi)))] #Remove the samples which the primers didn't work
mmi <- rel.ab(mmi) #Conver the input into relative abundances
mmo <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community output.csv")
rownames(mmo) <- mmo$X;mmo <- mmo[,!grepl("X",colnames(mmo))]
mmo <- mmo[,-c(multi_grep(c("MC_v2_NC_Br1","MC_v1_NA_Br1"),colnames(mmo)))]
#Collapse the somewhat similar rows
#Create the vector that contains similar species names
spname <- rownames(mmi)
spname[4:6] <- c("Cyprinidae-Trigonostigma-Trigonostigma espei")
spname[7:8] <- "Poeciliidae-Poecilia-Poecilia spp."
spname[13:14] <- "Cyclopteridae-Cyclopterus-Cyclopterus lumpus"
spname[17:18] <- "Pleuronectidae--"
#Collapse the somewhat similar rows
mmi <- coll_sim2(mmi,spname)
mmo <- coll_sim2(mmo,spname)
l <- rowSums(mmi)>0 #Remove species that rowSums are 0
mmi <- mmi[l,];mmo <- mmo[l,]
mmo[mmo<0.5] <- 0 #Round down the low abundances for simplicity
#Create the contrast/amplification dataframe
cont <- mmo/mmi
#Remove the Inf and NaNs
for (i in 1:nrow(cont)) {
cont[i,grep("Inf",cont[i,])] <- 0
}
for (i in 1:nrow(cont)) {
cont[i,grep("NaN",cont[i,])] <- 0
}
#Summarise the amplification efficiency dataframe
amp.eff <- cbind(rowMeans(cont[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(cont[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
rowMeans(cont[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(cont[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
colnames(amp.eff) <- c("MC_Amplicon","MC1","MC2","MC3")
#Remove the first species
amp.eff <- amp.eff[-1,]
#Rename species names
rownames(amp.eff) <- c("M.muelleri","T.espei","P.sphenops","G.morhua","B.brosme","M.villosus",
"M.scorpius","C.lumpus","P.gunnellus","L.maculatus","Pleuronectidae")
amp.eff.t <- trans(as.data.frame(amp.eff))
colnames(amp.eff.t) <- c("Species","Sample","Amp_eff")
# {pdf("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Roughly estimated amplification.pdf",width = 18.75,height = 18.75)
ggplot(amp.eff.t, aes(fill=Species, y=Amp_eff, x=Sample)) +
geom_bar(position="stack", stat="identity")+
ggtitle("Roughly estimated amplification efficiency of species in Mock communities")
library("ggplot")
library("ggplot2")
# {pdf("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Roughly estimated amplification.pdf",width = 18.75,height = 18.75)
ggplot(amp.eff.t, aes(fill=Species, y=Amp_eff, x=Sample)) +
geom_bar(position="stack", stat="identity")+
ggtitle("Roughly estimated amplification efficiency of species in Mock communities")
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmo[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
colnames(mmo_s) <- c("MC_Amplicon","MC1","MC2","MC3")
mmo_s <- mmo_s[-1,]
rownames(mmo_s) <- c("M.muelleri","T.espei","P.sphenops","G.morhua","B.brosme","M.villosus",
"M.scorpius","C.lumpus","P.gunnellus","L.maculatus","Pleuronectidae")
mmo_s.t <- trans(as.data.frame(mmo_s))
colnames(mmo_s.t) <- c("Species","Sample","Relative_abundance")
ggplot(mmo_s.t, aes(fill=Species, y=Relative_abundance, x=Sample)) +
geom_bar(position="stack", stat="identity")+
ggtitle("Relative abundances of species in  Mock communities")
mmo_s.t
dim(mmo_s.t)
dim(mmi_s.t)
dim(amp.eff.t)
amp.eff.t
mmo_s.t
cbind(mmo_s.t,amp.eff.t)
require("devtools");devtools::install_github("gledguri/ggednasd/ggu.base.fun");require("ggu.base.fun")
library("ggplot2")
coll_sim2 <- function(db,sim){
l <- unique(sim); #l <- l[-1]
otu_coll <- data.frame(matrix(0, length(l), ncol(db)))
# tax_coll <- data.frame(matrix(0, length(l), ncol(tax)))
colnames(otu_coll) <- colnames(db);#colnames(tax_coll) <- colnames(tax)
rownames(otu_coll) <- l
for (i in 1:length(l)) {
otu_coll[i,] <- colSums(db[sim%in%l[i],])
}
return(otu_coll)
}
#Import the dataframes
# mmi <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community input.csv")
mmi <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community input_v2.csv")
mmi$X[2:3] <- paste0("--",mmi$X[2:3]) #Fix the names for the few species
rownames(mmi) <- mmi$X;mmi <- mmi[,!grepl("X",colnames(mmi))] #Move the species names from a column into rownames
mmi <- mmi[,-c(multi_grep(c("MC_v2_NC_Br1","MC_v1_NA_Br1"),colnames(mmi)))] #Remove the samples which the primers didn't work
mmi <- rel.ab(mmi) #Conver the input into relative abundances
mmo <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community output.csv")
rownames(mmo) <- mmo$X;mmo <- mmo[,!grepl("X",colnames(mmo))]
mmo <- mmo[,-c(multi_grep(c("MC_v2_NC_Br1","MC_v1_NA_Br1"),colnames(mmo)))]
#Collapse the somewhat similar rows
#Create the vector that contains similar species names
spname <- rownames(mmi)
spname[4:6] <- c("Cyprinidae-Trigonostigma-Trigonostigma espei")
spname[7:8] <- "Poeciliidae-Poecilia-Poecilia spp."
spname[13:14] <- "Cyclopteridae-Cyclopterus-Cyclopterus lumpus"
spname[17:18] <- "Pleuronectidae--"
#Collapse the somewhat similar rows
mmi <- coll_sim2(mmi,spname)
mmo <- coll_sim2(mmo,spname)
l <- rowSums(mmi)>0 #Remove species that rowSums are 0
mmi <- mmi[l,];mmo <- mmo[l,]
mmo[mmo<0.5] <- 0 #Round down the low abundances for simplicity
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmo[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
colnames(mmo_s) <- c("MC_Amplicon","MC1","MC2","MC3")
mmo_s <- mmo_s[-1,]
rownames(mmo_s) <- c("M.muelleri","T.espei","P.sphenops","G.morhua","B.brosme","M.villosus",
"M.scorpius","C.lumpus","P.gunnellus","L.maculatus","Pleuronectidae")
mmo_s
#Summarise the mock community input dataframe
mmi_s <- cbind(rowMeans(mmi[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmi[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
rowMeans(mmi[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmi[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
colnames(mmi_s) <- c("MC_Amplicon","MC1","MC2","MC3")
mmo_s <- mmi_s[-1,]
rownames(mmi_s) <- c("M.muelleri","T.espei","P.sphenops","G.morhua","B.brosme","M.villosus",
"M.scorpius","C.lumpus","P.gunnellus","L.maculatus","Pleuronectidae")
mmi_s
#Summarise the mock community input dataframe
mmi_s <- cbind(rowMeans(mmi[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmi[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
rowMeans(mmi[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmi[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
colnames(mmi_s) <- c("MC_Amplicon","MC1","MC2","MC3")
mmi_s
dim(mmi_s)
rownames(mmi_s) <- c("C.harrengus","M.muelleri","T.espei","P.sphenops","G.morhua","B.brosme","M.villosus",
"M.scorpius","C.lumpus","P.gunnellus","L.maculatus","Pleuronectidae")
mmi_s
mmo_s.t <- trans(as.data.frame(mmo_s))
mmi_s.t <- trans(as.data.frame(mmi_s))
mmi_s.t
plotdb <- rbind(trans(as.data.frame(mmo_s)),trans(as.data.frame(mmi_s)))
plotdb
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
colnames(mmo_s) <- c("MC_Amplicon","MC1","MC2","MC3")
mmo_s <- mmo_s[-1,]
rownames(mmo_s) <- c("M.muelleri","T.espei","P.sphenops","G.morhua","B.brosme","M.villosus",
"M.scorpius","C.lumpus","P.gunnellus","L.maculatus","Pleuronectidae")
#Summarise the mock community input dataframe
mmi_s <- cbind(rowMeans(mmi[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmi[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
rowMeans(mmi[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmi[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
colnames(mmi_s) <- c("MC_Amplicon","MC1","MC2","MC3")
rownames(mmi_s) <- c("C.harrengus","M.muelleri","T.espei","P.sphenops","G.morhua","B.brosme","M.villosus",
"M.scorpius","C.lumpus","P.gunnellus","L.maculatus","Pleuronectidae")
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
colnames(mmo_s) <- c("MC_Amplicon","MC1","MC2","MC3")
mmo_s <- mmo_s[-1,]
mmo_s
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
mmo_s
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmo[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmo[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmo[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
colnames(mmo_s) <- c("MC_Amplicon","MC1","MC2","MC3")
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmo[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
colnames(mmo_s) <- c("MC_Amplicon","MC1","MC2","MC3")
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmo[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
colnames(mmo_s) <- c("MC_Amplicon","MC1","MC2","MC3")
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmo[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]));
require("devtools");devtools::install_github("gledguri/ggednasd/ggu.base.fun");require("ggu.base.fun")
library("ggplot2")
coll_sim2 <- function(db,sim){
l <- unique(sim); #l <- l[-1]
otu_coll <- data.frame(matrix(0, length(l), ncol(db)))
# tax_coll <- data.frame(matrix(0, length(l), ncol(tax)))
colnames(otu_coll) <- colnames(db);#colnames(tax_coll) <- colnames(tax)
rownames(otu_coll) <- l
for (i in 1:length(l)) {
otu_coll[i,] <- colSums(db[sim%in%l[i],])
}
return(otu_coll)
}
#Import the dataframes
# mmi <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community input.csv")
mmi <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community input_v2.csv")
mmi$X[2:3] <- paste0("--",mmi$X[2:3]) #Fix the names for the few species
rownames(mmi) <- mmi$X;mmi <- mmi[,!grepl("X",colnames(mmi))] #Move the species names from a column into rownames
mmi <- mmi[,-c(multi_grep(c("MC_v2_NC_Br1","MC_v1_NA_Br1"),colnames(mmi)))] #Remove the samples which the primers didn't work
mmi <- rel.ab(mmi) #Conver the input into relative abundances
mmo <- read.csv("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Mock community output.csv")
rownames(mmo) <- mmo$X;mmo <- mmo[,!grepl("X",colnames(mmo))]
mmo <- mmo[,-c(multi_grep(c("MC_v2_NC_Br1","MC_v1_NA_Br1"),colnames(mmo)))]
#Collapse the somewhat similar rows
#Create the vector that contains similar species names
spname <- rownames(mmi)
spname[4:6] <- c("Cyprinidae-Trigonostigma-Trigonostigma espei")
spname[7:8] <- "Poeciliidae-Poecilia-Poecilia spp."
spname[13:14] <- "Cyclopteridae-Cyclopterus-Cyclopterus lumpus"
spname[17:18] <- "Pleuronectidae--"
#Collapse the somewhat similar rows
mmi <- coll_sim2(mmi,spname)
mmo <- coll_sim2(mmo,spname)
l <- rowSums(mmi)>0 #Remove species that rowSums are 0
mmi <- mmi[l,];mmo <- mmo[l,]
mmo[mmo<0.5] <- 0 #Round down the low abundances for simplicity
#' #'*Create the contrast/amplification dataframe*
#' #You can turn it off if you don't want to focus on amplification efficiency
#' cont <- mmo/mmi
#'
#' #Remove the Inf and NaNs
#' for (i in 1:nrow(cont)) {
#'   cont[i,grep("Inf",cont[i,])] <- 0
#' }
#' for (i in 1:nrow(cont)) {
#'   cont[i,grep("NaN",cont[i,])] <- 0
#' }
#'
#' #Summarise the amplification efficiency dataframe
#' amp.eff <- cbind(rowMeans(cont[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(cont[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),
#'                  rowMeans(cont[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(cont[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]))
#' colnames(amp.eff) <- c("MC_Amplicon","MC1","MC2","MC3")
#'
#' #Remove the first species
#' amp.eff <- amp.eff[-1,]
#'
#' #Rename species names
#' rownames(amp.eff) <- c("M.muelleri","T.espei","P.sphenops","G.morhua","B.brosme","M.villosus",
#'                        "M.scorpius","C.lumpus","P.gunnellus","L.maculatus","Pleuronectidae")
#'
#' amp.eff.t <- trans(as.data.frame(amp.eff))
#' colnames(amp.eff.t) <- c("Species","Sample","Amp_eff")
#'
#' # {pdf("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Roughly estimated amplification.pdf",width = 18.75,height = 18.75)
#' ggplot(amp.eff.t, aes(fill=Species, y=Amp_eff, x=Sample)) +
#'   geom_bar(position="stack", stat="identity")+
#'   ggtitle("Roughly estimated amplification efficiency of species in Mock communities")
#'   # dev.off()}
#' # ggsave("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Mock community/Premature Analaysis/Roughly estimated amplification.pdf",
#'        # width = 18.75, height = 18.75,units = "cm")
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),rowMeans(mmo[,c("MC_v1_NA_Br2", "MC_v1_NA_Br3")]),rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),rowMeans(mmo[,c("MC_v3_ND_Br1", "MC_v3_ND_Br2","MC_v3_ND_Br3")]));
mmo_s
rm(mmo_s)
#Summarise the mock community output dataframe
mmo_s <- cbind(rowMeans(mmo[,c("MC_amplicon_NB_1", "MC_amplicon_NB_2")]),
rowMeans(mmo[,c("MC_v2_NB_Br1", "MC_v2_NB_Br2","MC_v2_NC_Br2")]),
#DNA analysis
# Instal libraries --------------------------------------------------------
library(devtools)
library(vegan)
library(ggu.base.fun)
library(ggplot2)
library(easycsv)
library(RColorBrewer)
library(labdsv)
library(GMCM)
# install_github("gledguri/ggednasd/ggu.base.fun")
# install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(pairwiseAdonis)
#pairwise.adonis2(dist ~ , data=mm,p.adjust.m = "BY")
devtools::session_info()
library(ggu.base.fun)
?write.result
?seq_dev()
# Import and annotate the blasted sequences
fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NCND_output.txt",header=FALSE)
# fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NANB_blast_output.txt",header=FALSE)
# fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NCND_blast_output.txt",header=FALSE)
colnames(fa) <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs")
dim(fa)
length(unique(fa$qseqid))
#'* Blast and annotate -------------------------------------------------------*
# Convert the sequences into a blastable fasta files
# edna_to_fasta(edna$id,edna$sequence,"Plate_NANB.fasta")
edna_to_fasta(edna$id,edna$sequence,"Plate_NCND.fasta")
#'* Import data -------------------------------------------------------------*
# edna<-read.csv("FISHDIV_NANB_GG_all_MOTUs_collapsed_d3.csv") #Chip #1
edna<-read.csv("FISHDIV_NCND_GG_all_MOTUs_collapsed_d3.csv") #Chip #1
#DNA analysis
# Instal libraries --------------------------------------------------------
library(devtools)
library(vegan)
library(ggu.base.fun)
library(ggplot2)
library(easycsv)
library(RColorBrewer)
library(labdsv)
library(GMCM)
# install_github("gledguri/ggednasd/ggu.base.fun")
# install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(pairwiseAdonis)
#pairwise.adonis2(dist ~ , data=mm,p.adjust.m = "BY")
devtools::session_info()
# Set Directory -----------------------------------------------------------
pd<-work("/IMR/Data") #set the project directory
list.dirs(pd,recursive = F)
wd<-low("eDNA",F)
setwd(wd)
rs<-fs::path(wd,"Stats result") #result directory
sd<-fs::path(work("/IMR/Data/Rscripts")) #script directory
pp<-fs::path(wd,"Plots") #Plot Path
source(paste0(sd,"/fornow.R")) #Curate the metadata
#'* Import data -------------------------------------------------------------*
# edna<-read.csv("FISHDIV_NANB_GG_all_MOTUs_collapsed_d3.csv") #Chip #1
edna<-read.csv("FISHDIV_NCND_GG_all_MOTUs_collapsed_d3.csv") #Chip #1
length(unique(fa$qseqid))
length(unique(edna$id))
# fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NANB_blast_output.txt",header=FALSE)
# fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NCND_blast_output.txt",header=FALSE)
colnames(fa) <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs")
# Import and annotate the blasted sequences
# fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NCND_output.txt",header=FALSE)
fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NANB_blast_output.txt",header=FALSE)
# fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NANB_blast_output.txt",header=FALSE)
# fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NCND_blast_output.txt",header=FALSE)
colnames(fa) <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs")
length(unique(fa$qseqid))
length(unique(edna$id))
# Import and annotate the blasted sequences
fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NCND_output.txt",header=FALSE)
# fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NANB_blast_output.txt",header=FALSE)
# fa <- read.delim("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/eDNA/Plate_NCND_blast_output.txt",header=FALSE)
colnames(fa) <- c("Ssciname", "scommname", "qseqid", "sseqid", "pident", "length", "mismatch", "gapopen", "qcovus", "qstart", "qend", "sstart", "send", "evalue", "bitscore","staxids", "qlen", "qcovs")
length(unique(fa$qseqid))
hist(edna$best_identity[edna$id%notin%unique(fa$qseqid)])
max(edna$best_identity[edna$id%notin%unique(fa$qseqid)])
hist(edna$best_identity[edna$id%notin%unique(fa$qseqid)],breaks=30,xlim=c(0.8,1))
hist(edna$best_identity[edna$id%notin%unique(fa$qseqid)],breaks=300,xlim=c(0.8,1))
hist(edna$best_identity[edna$id%notin%unique(fa$qseqid)],breaks=300,xlim=c(0.8,0.96))
hist(edna$best_identity[edna$id%notin%unique(fa$qseqid)],breaks=300,xlim=c(0.85,0.96))
abline(v=0.95,col="red")
hist(edna$best_identity[edna$id%notin%unique(fa$qseqid)],breaks=3000,xlim=c(0.85,0.96))
abline(v=0.95,col="red")
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.85,0.96))
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.6,1))
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.85,1))
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.65,0.85))
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.65,0.85),ylim=c(0,100))
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.85,0.1),ylim=c(0,100))
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.85,1),ylim=c(0,100))
hist(fa$pident[!duplicated(fa$qseqid)],breaks=3000,xlim=c(0.85,1),ylim=c(0,100))
hist(fa$pident[!duplicated(fa$qseqid)],breaks=3000,xlim=c(0.65,1),ylim=c(0,100))
hist(fa$pident[!duplicated(fa$qseqid)],breaks=3000,xlim=c(0.65,1))
fa$pident[!duplicated(fa$qseqid)]
hist(fa$pident[!duplicated(fa$qseqid)])
hist(fa$pident[!duplicated(fa$qseqid)],breaks=3000)
hist(fa$pident[!duplicated(fa$qseqid)]/100,breaks=3000)
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.85,1),ylim=c(0,100))
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.85,1),ylim=c(0,1000))
hist(fa$pident[!duplicated(fa$qseqid)]/100,breaks=3000)
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.85,1),ylim=c(0,1000))
plot(density(edna$best_identity[edna$id%in%unique(fa$qseqid)]))
hist(fa$pident[!duplicated(fa$qseqid)]/100,breaks=3000,xlim=c(0.85,1))
hist(fa$pident[!duplicated(fa$qseqid)]/100,breaks=3000,xlim=c(0.85,1),ylim=c(0,6000))
hist(edna$best_identity[edna$id%in%unique(fa$qseqid)],breaks=3000,xlim=c(0.85,1),ylim=c(0,6000))
library(devtools)
devtools::install_github("gledguri/ggednasd/ggu.base.fun")
library(devtools)
devtools::install_github("gledguri/ggednasd/ggu.base.fun")
devtools::load_all()
getwd()
setwd("/Users/a36142/Documents/GitHub/ggednasd")
devtools::load_all()
setwd("/Users/a36142/Documents/GitHub/ggednasd/ggu.base.fun")
devtools::load_all()
