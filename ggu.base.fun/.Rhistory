tax_list
library(dplyr)
library(ggu.base.fun)
library(naniar)
library(tidyr)
library(stringr)
library(coda)
combine_tax_df <- function(tax_list){
y <- vector("numeric",length(tax_list))
for (i in 1:length(tax_list)) {
y[i] <- dim(tax_list[[i]])[1]
}
if(sum(!duplicated(y))==1){
print("row numbers between tax data are the same")
}
if(sum(!duplicated(y))>1){
print("row numbers between tax data are NOT the same");
print(y)
}
for (i in 1:length(tax_list)) {
y[i] <- dim(tax_list[[i]])[2]
}
if(sum(!duplicated(y))==1){
print("column numbers between tax data are the same")
}
if(sum(!duplicated(y))>1){
print("column numbers between tax data are NOT the same");
print(y)
}
temp_tax <- as.data.frame(matrix(NA,nrow(tax_list[[1]]),ncol(tax_list[[1]])))
colnames(temp_tax) <- colnames(tax_list[[1]])
for (j in 1:ncol(tax_list[[1]])) {
for (i in 1:nrow(tax_list[[1]])){
q <- vector(length = length(tax_list))
for (k in 1:length(tax_list)) {
q[k] <- !is.na(tax_list[[k]][i,j])
}
if(sum(q)==1){
temp_tax[i,j] <- tax_list[[which(q==T)]][i,j]
}
if(sum(q)>1){
n <- which(q==T)
w <- vector("character",length(n))
for (m in 1:length(n)) {
w[m] <- tax_list[[n[m]]][i,j]
}
if(sum(!duplicated(w))==1){
temp_tax[i,j] <- w[1]
}
if(sum(!duplicated(w))>1){
temp_tax[i,j] <- paste(w[!duplicated(w)],collapse=" | ")
}
}
}
}
return(temp_tax)
}
incos_comb_tax_df <- function(comb_tax){
v <- vector("numeric",nrow(comb_tax))
for (i in 1:nrow(comb_tax)) {
v[i] <- sum(grepl("\\ \\|\\ ",comb_tax[i,]))
}
comb_tax[v>0,]
}
tax_blast_compare <- function(comb_tax){
inco_comb_tax <- incos_comb_tax_df(comb_tax)
for (i in 1:nrow(inco_comb_tax)) {
xx <- inco_comb_tax[i,] %>% select(colnames(.)[grepl("\\ \\|\\ ",.)])
qq <- grepl("\\ \\|\\ ",inco_comb_tax[i,])
pp <- as.data.frame(matrix(NA,length(tax_list),ncol(tax_list[[1]])+1)) %>% setNames(c(colnames(tax_list[[1]]),"db"))
for (p in 1:length(tax_list)) {
pp[p,] <- cbind(tax_list[[p]][as.numeric(rownames(inco_comb_tax[i,])),],names(tax_list)[p]) %>% setNames(c(colnames(.)[-ncol(.)],"db"))
}
print(pp);cat("\n")
vv <- vector("character",ncol(xx))
for (j in 1:ncol(xx)) {
l <- str_split(xx[j],"\\ \\|\\ ") %>% unlist() %>% as.vector()
questions(names(xx[j]));cat("\n")
sl <- multi.menu(c(l,"Enter manually"))
if(length(sl)==1){
if(sl==(length(l)+1)){
oo <- readline("Enter manually \n")
l <- c(l,oo)
}
if(sl==0){
l <- c(l,"")
sl <- ncol(xx)+1
}
vv[j] <- l[sl]
}
if(length(sl)>1){
vv[j] <- paste(l[sl],collapse = " | ")
}
}
inco_comb_tax[i,qq] <- vv
}
comb_tax[as.numeric(rownames(inco_comb_tax)),] <- inco_comb_tax %>% replace_with_na_all(condition = ~.x == "")
return(comb_tax)
}
tax_to_vector <- function(comb_tax){
vv <- vector("character",nrow(comb_tax))
for (i in 1:nrow(comb_tax)) {
vv[i] <- paste(comb_tax[i,],collapse = "/")
}
return(vv)
}
edna_to_otu <- function(edna_df){
otu <- edna_df %>% select(colnames(.)[(which(colnames(.)=="taxid")+1):(which(colnames(.)=="seq_length")-1)])
return(otu)
}
coll_sim2 <- function(db,sim){
l <- unique(sim); #l <- l[-1]
otu_coll <- data.frame(matrix(0, length(l), ncol(db)))
colnames(otu_coll) <- colnames(db);#colnames(tax_coll) <- colnames(tax)
rownames(otu_coll) <- l
for (i in 1:length(l)) {
otu_coll[i,] <- colSums(db[sim%in%l[i],])
}
return(otu_coll)
}
get_tax_tree <- function(input){
require(taxize)
tax_temp <- as.data.frame(matrix(NA,0,9)) %>% setNames(.,c("db","queury","kingdom","phylum","class","order","family","genus","species"))
for (i in 1:length(input)) {
tax_temp[i,] <- tax_name(input[i],c("kingdom","phylum","class","order","family","genus","species"))
write.csv(tax_temp,"tax_temp_delete.csv",row.names = T)
}
tax_temp <- read.csv("tax_temp_delete.csv",row.names = "X")
unlink("tax_temp_delete.csv")
return(tax_temp)
}
split_df <- function(input_vector,sep="_"){
temp <- str_split_fixed(input_vector,sep,n=10) %>% as.data.frame() %>%
replace_with_na_all(condition = ~.x == "")
temp <- temp[,colSums(is.na(temp))<nrow(temp)] %>% as.data.frame()
return(temp)
}
# Script ----------------------------------------------------------------------------
#Set working directory
setwd("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Bioinformatics/Plate_NANB")
#Import blasted files
blast <- read.csv("GG01.All_MOTUs_collapsed_blasted.csv")
#Split the multiple names annotated
ann_tax <- split_df(blast$annotated_name,sep="\\ \\ \\|\\|\\ \\ ")
ann_tax$V1[!is.na(ann_tax$V2)] <- ann_tax$V2[!is.na(ann_tax$V2)]
ann_tax <- ann_tax$V1
ann_tax <- split_df(ann_tax,sep="\\ \\|\\ ")
unloadNamespace("dplyr")
unloadNamespace("naniar")
unloadNamespace("tidyr")
unloadNamespace("stringr")
unloadNamespace("coda")
#Get taxonomic tree for all annotated taxa
tax_list <- vector(mode='list', length=ncol(ann_tax))
tax_list
library(dplyr)
library(ggu.base.fun)
library(naniar)
library(tidyr)
library(stringr)
library(coda)
combine_tax_df <- function(tax_list){
y <- vector("numeric",length(tax_list))
for (i in 1:length(tax_list)) {
y[i] <- dim(tax_list[[i]])[1]
}
if(sum(!duplicated(y))==1){
print("row numbers between tax data are the same")
}
if(sum(!duplicated(y))>1){
print("row numbers between tax data are NOT the same");
print(y)
}
for (i in 1:length(tax_list)) {
y[i] <- dim(tax_list[[i]])[2]
}
if(sum(!duplicated(y))==1){
print("column numbers between tax data are the same")
}
if(sum(!duplicated(y))>1){
print("column numbers between tax data are NOT the same");
print(y)
}
temp_tax <- as.data.frame(matrix(NA,nrow(tax_list[[1]]),ncol(tax_list[[1]])))
colnames(temp_tax) <- colnames(tax_list[[1]])
for (j in 1:ncol(tax_list[[1]])) {
for (i in 1:nrow(tax_list[[1]])){
q <- vector(length = length(tax_list))
for (k in 1:length(tax_list)) {
q[k] <- !is.na(tax_list[[k]][i,j])
}
if(sum(q)==1){
temp_tax[i,j] <- tax_list[[which(q==T)]][i,j]
}
if(sum(q)>1){
n <- which(q==T)
w <- vector("character",length(n))
for (m in 1:length(n)) {
w[m] <- tax_list[[n[m]]][i,j]
}
if(sum(!duplicated(w))==1){
temp_tax[i,j] <- w[1]
}
if(sum(!duplicated(w))>1){
temp_tax[i,j] <- paste(w[!duplicated(w)],collapse=" | ")
}
}
}
}
return(temp_tax)
}
incos_comb_tax_df <- function(comb_tax){
v <- vector("numeric",nrow(comb_tax))
for (i in 1:nrow(comb_tax)) {
v[i] <- sum(grepl("\\ \\|\\ ",comb_tax[i,]))
}
comb_tax[v>0,]
}
tax_blast_compare <- function(comb_tax){
inco_comb_tax <- incos_comb_tax_df(comb_tax)
for (i in 1:nrow(inco_comb_tax)) {
xx <- inco_comb_tax[i,] %>% select(colnames(.)[grepl("\\ \\|\\ ",.)])
qq <- grepl("\\ \\|\\ ",inco_comb_tax[i,])
pp <- as.data.frame(matrix(NA,length(tax_list),ncol(tax_list[[1]])+1)) %>% setNames(c(colnames(tax_list[[1]]),"db"))
for (p in 1:length(tax_list)) {
pp[p,] <- cbind(tax_list[[p]][as.numeric(rownames(inco_comb_tax[i,])),],names(tax_list)[p]) %>% setNames(c(colnames(.)[-ncol(.)],"db"))
}
print(pp);cat("\n")
vv <- vector("character",ncol(xx))
for (j in 1:ncol(xx)) {
l <- str_split(xx[j],"\\ \\|\\ ") %>% unlist() %>% as.vector()
questions(names(xx[j]));cat("\n")
sl <- multi.menu(c(l,"Enter manually"))
if(length(sl)==1){
if(sl==(length(l)+1)){
oo <- readline("Enter manually \n")
l <- c(l,oo)
}
if(sl==0){
l <- c(l,"")
sl <- ncol(xx)+1
}
vv[j] <- l[sl]
}
if(length(sl)>1){
vv[j] <- paste(l[sl],collapse = " | ")
}
}
inco_comb_tax[i,qq] <- vv
}
comb_tax[as.numeric(rownames(inco_comb_tax)),] <- inco_comb_tax %>% replace_with_na_all(condition = ~.x == "")
return(comb_tax)
}
tax_to_vector <- function(comb_tax){
vv <- vector("character",nrow(comb_tax))
for (i in 1:nrow(comb_tax)) {
vv[i] <- paste(comb_tax[i,],collapse = "/")
}
return(vv)
}
edna_to_otu <- function(edna_df){
otu <- edna_df %>% select(colnames(.)[(which(colnames(.)=="taxid")+1):(which(colnames(.)=="seq_length")-1)])
return(otu)
}
coll_sim2 <- function(db,sim){
l <- unique(sim); #l <- l[-1]
otu_coll <- data.frame(matrix(0, length(l), ncol(db)))
colnames(otu_coll) <- colnames(db);#colnames(tax_coll) <- colnames(tax)
rownames(otu_coll) <- l
for (i in 1:length(l)) {
otu_coll[i,] <- colSums(db[sim%in%l[i],])
}
return(otu_coll)
}
get_tax_tree <- function(input){
require(taxize)
tax_temp <- as.data.frame(matrix(NA,0,9)) %>% setNames(.,c("db","queury","kingdom","phylum","class","order","family","genus","species"))
for (i in 1:length(input)) {
tax_temp[i,] <- tax_name(input[i],c("kingdom","phylum","class","order","family","genus","species"))
write.csv(tax_temp,"tax_temp_delete.csv",row.names = T)
}
tax_temp <- read.csv("tax_temp_delete.csv",row.names = "X")
unlink("tax_temp_delete.csv")
return(tax_temp)
}
split_df <- function(input_vector,sep="_"){
temp <- str_split_fixed(input_vector,sep,n=10) %>% as.data.frame() %>%
replace_with_na_all(condition = ~.x == "")
temp <- temp[,colSums(is.na(temp))<nrow(temp)] %>% as.data.frame()
return(temp)
}
# Script ----------------------------------------------------------------------------
#Set working directory
setwd("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Bioinformatics/Plate_NANB")
#Import blasted files
blast <- read.csv("GG01.All_MOTUs_collapsed_blasted.csv")
#Split the multiple names annotated
ann_tax <- split_df(blast$annotated_name,sep="\\ \\ \\|\\|\\ \\ ")
ann_tax
ann_tax$V1[!is.na(ann_tax$V2)] <- ann_tax$V2[!is.na(ann_tax$V2)]
ann_tax
ann_tax <- ann_tax$V1
ann_tax
ann_tax <- split_df(ann_tax,sep="\\ \\|\\ ")
ann_tax
#Get taxonomic tree for all annotated taxa
tax_list <- vector(mode='list', length=ncol(ann_tax))
tax_list
unloadNamespace("dplyr")
unloadNamespace("naniar")
unloadNamespace("tidyr")
unloadNamespace("stringr")
unloadNamespace("coda")
i=1
i=3
tax_list[[i]] <- get_tax_tree(ann_tax[,i] %>% replace_na("")) %>% select(kingdom,phylum,class,order,family,genus,species)
get_tax_tree
library(tidyr)
tax_list[[i]] <- get_tax_tree(ann_tax[,i] %>% replace_na("")) %>% select(kingdom,phylum,class,order,family,genus,species)
unloadNamespace("tidyr")
library(dplyr)
tax_list[[i]] <- get_tax_tree(ann_tax[,i] %>% replace_na("")) %>% select(kingdom,phylum,class,order,family,genus,species)
ann_tax
ann_tax[,i]
get_tax_tree(ann_tax[,i])
get_tax_tree(ann_tax[103,i])
tax
tax_list
library(dplyr)
library(ggu.base.fun)
library(naniar)
library(tidyr)
library(stringr)
library(coda)
combine_tax_df <- function(tax_list){
y <- vector("numeric",length(tax_list))
for (i in 1:length(tax_list)) {
y[i] <- dim(tax_list[[i]])[1]
}
if(sum(!duplicated(y))==1){
print("row numbers between tax data are the same")
}
if(sum(!duplicated(y))>1){
print("row numbers between tax data are NOT the same");
print(y)
}
for (i in 1:length(tax_list)) {
y[i] <- dim(tax_list[[i]])[2]
}
if(sum(!duplicated(y))==1){
print("column numbers between tax data are the same")
}
if(sum(!duplicated(y))>1){
print("column numbers between tax data are NOT the same");
print(y)
}
temp_tax <- as.data.frame(matrix(NA,nrow(tax_list[[1]]),ncol(tax_list[[1]])))
colnames(temp_tax) <- colnames(tax_list[[1]])
for (j in 1:ncol(tax_list[[1]])) {
for (i in 1:nrow(tax_list[[1]])){
q <- vector(length = length(tax_list))
for (k in 1:length(tax_list)) {
q[k] <- !is.na(tax_list[[k]][i,j])
}
if(sum(q)==1){
temp_tax[i,j] <- tax_list[[which(q==T)]][i,j]
}
if(sum(q)>1){
n <- which(q==T)
w <- vector("character",length(n))
for (m in 1:length(n)) {
w[m] <- tax_list[[n[m]]][i,j]
}
if(sum(!duplicated(w))==1){
temp_tax[i,j] <- w[1]
}
if(sum(!duplicated(w))>1){
temp_tax[i,j] <- paste(w[!duplicated(w)],collapse=" | ")
}
}
}
}
return(temp_tax)
}
incos_comb_tax_df <- function(comb_tax){
v <- vector("numeric",nrow(comb_tax))
for (i in 1:nrow(comb_tax)) {
v[i] <- sum(grepl("\\ \\|\\ ",comb_tax[i,]))
}
comb_tax[v>0,]
}
tax_blast_compare <- function(comb_tax){
inco_comb_tax <- incos_comb_tax_df(comb_tax)
for (i in 1:nrow(inco_comb_tax)) {
xx <- inco_comb_tax[i,] %>% select(colnames(.)[grepl("\\ \\|\\ ",.)])
qq <- grepl("\\ \\|\\ ",inco_comb_tax[i,])
pp <- as.data.frame(matrix(NA,length(tax_list),ncol(tax_list[[1]])+1)) %>% setNames(c(colnames(tax_list[[1]]),"db"))
for (p in 1:length(tax_list)) {
pp[p,] <- cbind(tax_list[[p]][as.numeric(rownames(inco_comb_tax[i,])),],names(tax_list)[p]) %>% setNames(c(colnames(.)[-ncol(.)],"db"))
}
print(pp);cat("\n")
vv <- vector("character",ncol(xx))
for (j in 1:ncol(xx)) {
l <- str_split(xx[j],"\\ \\|\\ ") %>% unlist() %>% as.vector()
questions(names(xx[j]));cat("\n")
sl <- multi.menu(c(l,"Enter manually"))
if(length(sl)==1){
if(sl==(length(l)+1)){
oo <- readline("Enter manually \n")
l <- c(l,oo)
}
if(sl==0){
l <- c(l,"")
sl <- ncol(xx)+1
}
vv[j] <- l[sl]
}
if(length(sl)>1){
vv[j] <- paste(l[sl],collapse = " | ")
}
}
inco_comb_tax[i,qq] <- vv
}
comb_tax[as.numeric(rownames(inco_comb_tax)),] <- inco_comb_tax %>% replace_with_na_all(condition = ~.x == "")
return(comb_tax)
}
tax_to_vector <- function(comb_tax){
vv <- vector("character",nrow(comb_tax))
for (i in 1:nrow(comb_tax)) {
vv[i] <- paste(comb_tax[i,],collapse = "/")
}
return(vv)
}
edna_to_otu <- function(edna_df){
otu <- edna_df %>% select(colnames(.)[(which(colnames(.)=="taxid")+1):(which(colnames(.)=="seq_length")-1)])
return(otu)
}
coll_sim2 <- function(db,sim){
l <- unique(sim); #l <- l[-1]
otu_coll <- data.frame(matrix(0, length(l), ncol(db)))
colnames(otu_coll) <- colnames(db);#colnames(tax_coll) <- colnames(tax)
rownames(otu_coll) <- l
for (i in 1:length(l)) {
otu_coll[i,] <- colSums(db[sim%in%l[i],])
}
return(otu_coll)
}
get_tax_tree <- function(input){
require(taxize)
tax_temp <- as.data.frame(matrix(NA,0,9)) %>% setNames(.,c("db","queury","kingdom","phylum","class","order","family","genus","species"))
for (i in 1:length(input)) {
tax_temp[i,] <- tax_name(input[i],c("kingdom","phylum","class","order","family","genus","species"))
write.csv(tax_temp,"tax_temp_delete.csv",row.names = T)
}
tax_temp <- read.csv("tax_temp_delete.csv",row.names = "X")
unlink("tax_temp_delete.csv")
return(tax_temp)
}
split_df <- function(input_vector,sep="_"){
temp <- str_split_fixed(input_vector,sep,n=10) %>% as.data.frame() %>%
replace_with_na_all(condition = ~.x == "")
temp <- temp[,colSums(is.na(temp))<nrow(temp)] %>% as.data.frame()
return(temp)
}
# Script ----------------------------------------------------------------------------
#Set working directory
setwd("/Users/a36142/Library/CloudStorage/OneDrive-Havforskningsinstituttet/IMR/Data/Bioinformatics/Plate_NANB")
#Import blasted files
blast <- read.csv("GG01.All_MOTUs_collapsed_blasted.csv")
#Split the multiple names annotated
ann_tax <- split_df(blast$annotated_name,sep="\\ \\ \\|\\|\\ \\ ")
ann_tax$V1[!is.na(ann_tax$V2)] <- ann_tax$V2[!is.na(ann_tax$V2)]
ann_tax <- ann_tax$V1
ann_tax <- split_df(ann_tax,sep="\\ \\|\\ ")
#Get taxonomic tree for all annotated taxa
tax_list <- vector(mode='list', length=ncol(ann_tax))
for (i in 1:length(tax_list)){
tax_list[[i]] <- get_tax_tree(ann_tax[,i] %>% replace_na("")) %>% select(kingdom,phylum,class,order,family,genus,species)
}
tax_list
#Filter the local tax data to match the blasted tax tree
tax <- blast %>% select(kingdom_name,phylum_name,class_name,order_name,class_name,family_name,genus_name,species_name) %>%
mutate(kingdom_name=ifelse(kingdom_name=="Metazoa","Animalia",kingdom_name)) %>%
mutate(class_name=ifelse(class_name=="Actinopterygii","Teleostei",class_name)) %>%
replace_with_na_all(condition = ~.x == "") %>% as.data.frame()
#Create the tax_list (taxonomic list)
tax_list <- append(tax_list,list(tax))
names(tax_list) <- c(paste0("blast_",1:(length(tax_list)-1)),"local_tax")
unloadNamespace("dplyr")
#Combine the taxonomic list into one df
comb_tax <- combine_tax_df(tax_list)
comb_tax
#Do the selection of the correct taxonomic annotation
comb_tax_compared <- tax_blast_compare(comb_tax)
require(dplyr)
require(stringr)
#Do the selection of the correct taxonomic annotation
comb_tax_compared <- tax_blast_compare(comb_tax)
#'*How to update the R package*
setwd("/Users/a36142/Documents/GitHub/ggednasd")
list.files()
list.dirs()
setwd("./ggu.base.fun")
list.files()
document()
library(roxygen2)
document()
library("devtools")
library(roxygen2)
document()
library(ggu.base.fun)
q()
